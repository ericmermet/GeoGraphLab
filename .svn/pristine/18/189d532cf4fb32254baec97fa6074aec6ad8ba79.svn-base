/**
 * GeoGraphLab - Eric Mermet - Cogit / IGN 2007 - 2010
 * 
 * ${file_name} in ${package_name}
 * 
 */

package fr.ign.cogit.geographlab.exploration;


import java.awt.Point;
import java.util.HashSet;
import java.util.Set;


import fr.ign.cogit.geographlab.graphe.Arc;
import fr.ign.cogit.geographlab.graphe.Graphe;
import fr.ign.cogit.geographlab.graphe.Noeud;
import fr.ign.cogit.geographlab.graphe.event.GrapheEvent;
import fr.ign.cogit.geographlab.ihm.MainWindow;
import fr.ign.cogit.geographlab.visu.ArcGraphique;
import fr.ign.cogit.geographlab.visu.NoeudGraphique;
import fr.ign.cogit.geographlab.visu.ObjetGraphique;
import fr.ign.cogit.geographlab.visu.ZoneAgregee;

public class VueDuGraphe {
	
	MainWindow fenetrePrincipale;
	
	private String nom = new String();
	
	public boolean locked = false;
	
	Graphe grapheDeLaVue = null;
	
	public Set<NoeudGraphique> noeudsGraphiques;
	public Set<ArcGraphique> arcsGraphiques;
	public Set<ObjetGraphique> objetsGraphiques;
	public Set<ZoneAgregee> zonesAgregees;
	
	private GrapheEvent event(Graphe g) {
		GrapheEvent evt = new GrapheEvent(this.fenetrePrincipale, this, g);
		
		// System.out.println("pouet");
		if (evt.grapheChange()) {
			// System.out.println("youpi");
		}
		return evt;
	}
	
	public VueDuGraphe(MainWindow fenetrePrincipale, Carte carte, String nom, Graphe g) {
		this.fenetrePrincipale = fenetrePrincipale;
		setNom(nom);
		this.grapheDeLaVue = g;
		
		this.objetsGraphiques = new HashSet<ObjetGraphique>();
		this.noeudsGraphiques = new HashSet<NoeudGraphique>();
		this.arcsGraphiques = new HashSet<ArcGraphique>();
		this.zonesAgregees = new HashSet<ZoneAgregee>();
		
		// Construction des noeuds et arcs graphiques a partir du graphe
		// topologique
		setNoeudsGraphiques(this.grapheDeLaVue);
		setArcsGraphiques(this.grapheDeLaVue);
		g.addGrapheListener(this.event(g));
		g.addPoidsArcChange(this.event(g));
	}
	
	public void effacerObjetsGraphiques() {
		this.noeudsGraphiques = new HashSet<NoeudGraphique>();
		this.arcsGraphiques = new HashSet<ArcGraphique>();
	}
	
	public Graphe getGrapheDeLaVue() {
		return this.grapheDeLaVue;
	}
	
	public void setGrapheDeLaVue(Graphe grapheDeLaVue) {
		this.grapheDeLaVue = grapheDeLaVue;
	}
	
	public String getNom() {
		return this.nom;
	}
	
	public void setNom(String nom) {
		this.nom = nom;
	}
	
	public String getNomGraphe() {
		return this.grapheDeLaVue.getNom();
	}
	
	public void addNoeud(NoeudGraphique n) {
		this.noeudsGraphiques.add(n);
		this.objetsGraphiques.add(n);
	}
	
	public void removeNoeudGraphique(String nomDuNoeudTopologique) {
		
		Noeud n = getNoeudGraphique(nomDuNoeudTopologique).getNoeudTopologique();
		
		Set<Arc> arcsVoisins = this.grapheDeLaVue.edgesOf(n);
		
		//On retire les arcs lies au noeud que l'on efface
		for (Arc iterArc : arcsVoisins) {
			this.arcsGraphiques.remove(iterArc.getArcGraphique());
			this.objetsGraphiques.remove(iterArc.getArcGraphique());
			
		}
		
		//Puis le noeud
		this.noeudsGraphiques.remove(getNoeudGraphique(nomDuNoeudTopologique));
		this.objetsGraphiques.remove(getNoeudGraphique(nomDuNoeudTopologique));
	}
	
	public void setNoeudsGraphiques(Set<NoeudGraphique> noeudsGraphique) {
		this.noeudsGraphiques = noeudsGraphique;
		this.objetsGraphiques.addAll(noeudsGraphique);
	}
	
	public void setNoeudsGraphiques(Graphe g) {
		
		for (Noeud iterNoeud : g.getNoeuds()) {
			// NoeudGraphique nG = new NoeudGraphique(iterNoeud);
			NoeudGraphique nG = iterNoeud.getNoeudGraphique();
			nG.setPosition(iterNoeud.getPosition());
			addNoeud(nG);
		}
	}
	
	public void addArc(ArcGraphique a) {
		this.arcsGraphiques.add(a);
		this.objetsGraphiques.add(a);
	}
	
	public void removeArcGraphique(String nomDeLArcTopologique) {
		this.arcsGraphiques.remove(getArcGraphique(nomDeLArcTopologique));
		this.objetsGraphiques.remove(getArcGraphique(nomDeLArcTopologique));
	}
	
	public void setArcsGraphiques(Graphe g) {
		
		for (Arc iterArc : g.getArcs()) {
			// ArcGraphique aG = new ArcGraphique(iterArc);
			ArcGraphique aG = iterArc.getArcGraphique();
			addArc(aG);
		}
	}
	
	// public void setObjetsGraphiques(Graphe g){
	// for(NoeudGraphique iterNoeud : getNoeudsGraphiques()){
	// this.objetsGraphiques.add(new NoeudGraphique(iterNoeud));
	// this.objetsGraphiques.addAll(c)
	// }
	// for(Arc iterArc : g.getArcs()){
	// this.objetsGraphiques.add(new ArcGraphique(iterArc));
	// }
	// }
	
	public Set<ObjetGraphique> getObjetsGraphiques() {
		return this.objetsGraphiques;
	}
	
	public Set<NoeudGraphique> getNoeudsGraphiques() {
		return this.noeudsGraphiques;
	}
	
	public NoeudGraphique getNoeudGraphique(String nomDuNoeud) {
		
		Set<NoeudGraphique> mesNoeuds = getNoeudsGraphiques();
		
		for (NoeudGraphique iterNoeud : mesNoeuds) {
			if (iterNoeud.getNom().compareTo(nomDuNoeud) == 0) {
				return iterNoeud;
			}
		}
		return null;
	}
	
	public void setArcsGraphiques(Set<ArcGraphique> arcsGraphiques) {
		this.arcsGraphiques = arcsGraphiques;
		this.objetsGraphiques.addAll(arcsGraphiques);
	}
	
	public Set<ArcGraphique> getArcsGraphiques() {
		return this.arcsGraphiques;
	}
	
	public ArcGraphique getArcGraphique(String nomDeLarc) {
		
		Set<ArcGraphique> mesArcs = getArcsGraphiques();
		
		for (ArcGraphique iterNoeud : mesArcs) {
			if (iterNoeud.getNom().compareTo(nomDeLarc) == 0) {
				return iterNoeud;
			}
		}
		return null;
	}
	
	public void addZoneAgregee(ZoneAgregee zoneAgregee) {
		this.zonesAgregees.add(zoneAgregee);
		this.objetsGraphiques.add(zoneAgregee);
	}
	
	public void addZonesAgregees(Set<ZoneAgregee> zonesAgregeesInput ) {
		this.zonesAgregees.addAll(zonesAgregeesInput);
		this.objetsGraphiques.addAll(zonesAgregeesInput);
	}
	
	public void removeZoneAgregee(ZoneAgregee zoneAgregee) {
		this.zonesAgregees.remove(zoneAgregee);
		this.objetsGraphiques.remove(zoneAgregee);
	}
	
	public Set<ZoneAgregee> getZonesAgregees() {
		return this.zonesAgregees;
	}
	
	public ZoneAgregee getZoneAgregee(String nomDeLaZone) {
		
		Set<ZoneAgregee> mesZones = getZonesAgregees();
		
		for (ZoneAgregee iterZone : mesZones) {
			if (iterZone.getNom().compareTo(nomDeLaZone) == 0) {
				return iterZone;
			}
		}
		return null;
	}
	
	public void unselectAll() {
		Set<NoeudGraphique> mesNoeudsGraphiques = getNoeudsGraphiques();
		for (NoeudGraphique iterNoeudGraphique : mesNoeudsGraphiques) {
			iterNoeudGraphique.setSelected(false);
		}
		
		Set<ArcGraphique> mesArcssGraphiques = getArcsGraphiques();
		for (ArcGraphique iterArcGraphique : mesArcssGraphiques) {
			iterArcGraphique.setSelected(false);
		}
	}
	
	public void selectionObjet(String nomDeLobj) {
		
		Set<NoeudGraphique> mesNoeudsGraphiques = getNoeudsGraphiques();
		for (NoeudGraphique iterNoeudGraphique : mesNoeudsGraphiques) {
			if (iterNoeudGraphique.getNom().compareTo(nomDeLobj) == 0) {
				iterNoeudGraphique.setSelected(true);
				return;
			}
		}
		
		Set<ArcGraphique> mesArcssGraphiques = getArcsGraphiques();
		for (ArcGraphique iterArcGraphique : mesArcssGraphiques) {
			if (iterArcGraphique.getNom().compareTo(nomDeLobj) == 0) {
				iterArcGraphique.setSelected(true);
				return;
			}
		}
		
	}
	
	public void selectionObjet(ObjetGraphique objGraph) {
		
		for (ObjetGraphique iterObjetGraphique : getObjetsGraphiques()) {
			iterObjetGraphique.setSelected(false);
		}
		objGraph.setSelected(true);
	}
	
	public Point[] getDimensionVue() {
		
		int xMin = Integer.MAX_VALUE;
		int yMin = Integer.MAX_VALUE;
		int xMax = Integer.MIN_VALUE;
		int yMax = Integer.MIN_VALUE;
		
		for (NoeudGraphique iterNoeudGraphique : this.noeudsGraphiques) {
			if (iterNoeudGraphique.getXPosition() > xMax)
				xMax = iterNoeudGraphique.getXPosition();
			if (iterNoeudGraphique.getYPosition() > yMax)
				yMax = iterNoeudGraphique.getYPosition();
			if (iterNoeudGraphique.getXPosition() < xMin)
				xMin = iterNoeudGraphique.getXPosition();
			if (iterNoeudGraphique.getYPosition() < yMin)
				yMin = iterNoeudGraphique.getYPosition();
		}
		
		Point[] returnPoint = new Point[2];
		returnPoint[0] = new Point(xMin, yMin);
		returnPoint[1] = new Point(xMax, yMax);
		
		return returnPoint;
	}
}