/**
* GeoGrapheLab ( http://geographlab.free.fr/ ) - This file is part of GeoGrapheLab
* Copyright (C) 2007-2012 - IGN  - Eric Mermet & IRSTEA - Jean-Marc Tacnet (2011)
*
* This file must be used under the terms of the CeCILL-B.
* This source file is licensed as described in the file COPYING, which
* you should have received as part of this distribution.  The terms
* are also available at
* http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
*
*/

package fr.irstea.adret.geographlab.plugins.ihm.exploration;

import javax.swing.ImageIcon;

import fr.ign.cogit.geographlab.ihm.constantes.ConstantesExploration;
import fr.ign.cogit.geographlab.ihm.constantes.ConstantesImages;
import fr.ign.cogit.geographlab.ihm.exploration.BlocCarte;
import fr.ign.cogit.geographlab.ihm.exploration.PanelExplo;
import fr.ign.cogit.geographlab.interpreteur.OperationsMesure;


public class BlocOperationMesure extends fr.ign.cogit.geographlab.ihm.exploration.BlocOperationMesure {
	
	public BlocOperationMesure(PanelExplo panelPere, int operation) {
		
		super(panelPere, operation);
		
		this.couleur = ConstantesExploration.couleurMesure;
		
		this.levierMisEnJeu = ConstantesExploration.blocOperationMesure;
		
		this.setType(operation);
		
		switch (operation) {
			case ConstantesExploration.typeOperationAddition3Mesure:
				setImageOperation(new ImageIcon(getClass().getResource(ConstantesImages.imgAddition3)).getImage());
				break;
			case ConstantesExploration.typeOperationMutliplication3Mesure:
				setImageOperation(new ImageIcon(getClass().getResource(ConstantesImages.imgMultiplication3)).getImage());
				break;
			case ConstantesExploration.typeOperationFonctionUnaireMesure:
				setImageOperation(new ImageIcon(getClass().getResource(ConstantesImages.imgFonctionUnaire)).getImage());
				break;
			case ConstantesExploration.typeOperationFonctionBinaireMesure:
				setImageOperation(new ImageIcon(getClass().getResource(ConstantesImages.imgFonctionBinaire)).getImage());
				break;
			default:
				break;
		}
		
	}
	
	@Override
	public void run() {
		OperationsMesure op = new OperationsMesure();
		System.out.println("Compute !");
			String operationString = "";
				switch (this.getOperation()) {
					case ConstantesExploration.typeOperationAddition3Mesure:
						operationString = "++";
						break;
					case ConstantesExploration.typeOperationMutliplication3Mesure:
						operationString = "**";
						break;
					case ConstantesExploration.typeOperationFonctionUnaireMesure:
						operationString = "fonctionUnaire";
						break;
					case ConstantesExploration.typeOperationFonctionBinaireMesure:
						operationString = "fonctionBinaire";
						break;
				}
				
				//Test sur le nombre de connexions entrantes sur l'operateur
				switch (this.getOperation()) {
					case ConstantesExploration.typeOperationFonctionUnaireMesure:
						op.operations( ((BlocCarte)this.connecteurEntreeGauche).getCarte(), null, null, operationString, ((BlocCarte)this.connecteurSortie).getCarte());
						break;
					case ConstantesExploration.typeOperationAddition3Mesure:
					case ConstantesExploration.typeOperationMutliplication3Mesure:
						op.operations( ((BlocCarte)this.connecteurEntreeGauche).getCarte(), ((BlocCarte)this.connecteurEntreeHaut).getCarte(), ((BlocCarte)this.connecteurEntreeBas).getCarte(), operationString, ((BlocCarte)this.connecteurSortie).getCarte());
						break;
					default:
						op.operations( ((BlocCarte)this.connecteurEntreeGauche).getCarte(), ((BlocCarte)this.connecteurEntreeHaut).getCarte(), null, operationString, ((BlocCarte)this.connecteurSortie).getCarte());
						break;
				}
				
				((BlocCarte)this.connecteurSortie).getCarte().setNom(((BlocCarte)this.connecteurEntreeHaut).getCarte().getNom() + " " + operationString + " " + ((BlocCarte)this.connecteurEntreeGauche).getCarte().getNom());
				((BlocCarte)this.connecteurSortie).getCarte().getGraphe().setGrapheChange();
				((BlocCarte)this.connecteurSortie).getCarte().getLegendeDeLaCarte().setLegendesNoeudsArcsZonePourValeurs();
				((BlocCarte)this.connecteurSortie).getCarte().parent.parent.panelTools.viewList.setSelectedIndex(1);
				((BlocCarte)this.connecteurSortie).getCarte().variablesDeCarte.affichageEnCours = new String("Vue Indicateur");
				
				((BlocCarte)this.connecteurSortie).getCarte().parent.parent.panelLayer.updateLayersFromLayerControler();
	}
	
}