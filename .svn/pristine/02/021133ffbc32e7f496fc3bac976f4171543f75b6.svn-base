/**
 * GeoGraphLab - Eric Mermet - Cogit / IGN 2007 - 2010
 * 
 * ${file_name} in ${package_name}
 * 
 */

package fr.ign.cogit.geographlab.exploration;

import fr.ign.cogit.geographlab.cheminements.OD;
import fr.ign.cogit.geographlab.exploration.events.EspaceEvent;
import fr.ign.cogit.geographlab.exploration.listeners.EspaceListener;
import fr.ign.cogit.geographlab.graphe.Noeud;
import fr.ign.cogit.geographlab.ihm.MainWindow;


import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

import javax.swing.event.EventListenerList;


public class Espace {
	
	MainWindow fenetrePrincipale;
	public HashMap<Integer, OD> espaceDeDef = new HashMap<Integer, OD>();
	
	public boolean locked = false;
	
	private final EventListenerList listenersEspace = new EventListenerList();
	
	public Espace(MainWindow mainWindow, HashMap<Integer, OD> odEspace) {
		
		this.fenetrePrincipale = mainWindow;
		addEspaceListener(new EspaceEvent(mainWindow) {
			// Event for space listener
		});
		
		setEspaceDeDef(odEspace);
	}
	
	public void setEspaceDeDef(HashMap<Integer, OD> espaceDeDef) {
		this.espaceDeDef = espaceDeDef;
		// fireGrapheChange();
	}
	
	public void setEspaceDeDef(HashSet<OD> espaceDeDef) {
		
		this.espaceDeDef.clear();
		for (OD od : espaceDeDef) {
			this.espaceDeDef.put( new Integer(od.hashCode()), od);
		}
		
		// fireGrapheChange();
	}
	
	public void setToutesLesOD(Set<Noeud> tousLesNoeuds) {
		
		HashMap<Integer, OD> returnToutesLesOD = new HashMap<Integer, OD>();
		
//		Object[] mesNoeudsEnTableau = tousLesNoeuds.toArray();
//		
//		for (int i = 0; i < mesNoeudsEnTableau.length; i++) {
//			for (int j = i + 1; j < mesNoeudsEnTableau.length; j++) {
//				OD localOD = new OD((Noeud) mesNoeudsEnTableau[i], (Noeud) mesNoeudsEnTableau[j]);
//				returnToutesLesOD.put(new Integer(localOD.hashCode()), localOD);
//			}
//		}
		if( this.fenetrePrincipale.panelActif.carte.variablesDeCarte.afficheGrapheNonDirige == false )
			returnToutesLesOD = this.fenetrePrincipale.panelActif.carte.getGraphe().getToutesLesODUDirected();
		else
			returnToutesLesOD = this.fenetrePrincipale.panelActif.carte.getGraphe().getToutesLesOD();
		
		setEspaceDeDef(returnToutesLesOD);
		fireGrapheChange();
	}
	
	public Collection<OD> getToutesLesOD() {
		return this.espaceDeDef.values();
	}
		
	public HashMap<Integer, OD> getEspaceDeDef() {
		return this.espaceDeDef;
	}
	
	public void clearEspaceDeDef() {
		this.espaceDeDef.clear();
	}
	
	public OD getOD(Noeud origine, Noeud destination) {
		
		OD localOD = new OD(origine, destination);
		
		return this.espaceDeDef.get(localOD);
	}
	
	@Override
	public Espace clone() {
		Espace espaceCopie = null;
		HashMap<Integer, OD> espaceDeDefcopie = new HashMap<Integer, OD>();
		espaceCopie = new Espace(this.fenetrePrincipale, null);
		
		for (OD iterOD : getToutesLesOD()) {
			espaceDeDefcopie.put(new Integer(iterOD.hashCode()), iterOD);
		}
		
		espaceCopie.setEspaceDeDef(espaceDeDefcopie);
		return espaceCopie;
	}
	
	public void addEspaceListener(EspaceListener listener) {
		this.listenersEspace.add(EspaceListener.class, listener);
	}
	
	public void removeEspaceListener(EspaceListener listener) {
		this.listenersEspace.remove(EspaceListener.class, listener);
	}
	
	public EspaceListener[] getEspaceListeners() {
		return this.listenersEspace.getListeners(EspaceListener.class);
	}
	
	protected void fireGrapheChange() {
		for (EspaceListener listener : getEspaceListeners()) {
			listener.espaceChange();
		}
	}
}
