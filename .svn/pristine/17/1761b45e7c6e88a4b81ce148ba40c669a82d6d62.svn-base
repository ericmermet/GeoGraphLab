/**
 * GeoGraphLab - Eric Mermet - Cogit / IGN 2007 - 2010
 * 
 * ${file_name} in ${package_name}
 * 
 */

package fr.ign.cogit.geographlab.algo.geom;

import fr.ign.cogit.geographlab.graphe.Graphe;
import fr.ign.cogit.geographlab.graphe.Noeud;
import megamu.mesh.MPolygon;
import megamu.mesh.Voronoi;
import fr.ign.cogit.geographlab.visu.CelluleDeVoronoi;

import java.util.HashSet;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Point;

public class RegionsDeVoronoi extends Thread {
	
	private Graphe grapheInitial;
	private Point[] mesPointsDansLespace;
	private Voronoi monVoronoi;
	private MPolygon[] regionsDeVoronoi;
	private float[][] arretesDeVoronoi;
	
	public Thread thread;
	
	public RegionsDeVoronoi(Graphe g) {
		this.thread = new Thread(this);
		this.grapheInitial = g;
	}
	
	@Override
	public void run() {
		
		this.mesPointsDansLespace = this.grapheInitial.getNoeudsArray();
		
		float[][] mesPointsEnFloat = new float[this.mesPointsDansLespace.length][2];
		
		for (int i = 0; i < mesPointsEnFloat.length; i++) {
			mesPointsEnFloat[i][0] = (float) this.mesPointsDansLespace[i].getX();
			mesPointsEnFloat[i][1] = (float) this.mesPointsDansLespace[i].getY();
		}
		
		this.monVoronoi = new Voronoi(mesPointsEnFloat);
		
		this.regionsDeVoronoi = this.monVoronoi.getRegions();
		
		this.arretesDeVoronoi = this.monVoronoi.getEdges();
	}
	
	public MPolygon[] getRegionsDeVoronoi() {
		return this.regionsDeVoronoi;
	}
	
	public float[][] getArreteDeVoronoi() {
		return this.arretesDeVoronoi;
	}
	
	public HashSet<CelluleDeVoronoi> getRegionsDeVoronoiPolygone() {
		
		HashSet<CelluleDeVoronoi> cellsReturn = new HashSet<CelluleDeVoronoi>();
		
//		Area aireCourante;
		
		// D'abord l'enveloppe convexe pour recuper les points de frontiere
//		EnveloppeConvexe ev = new EnveloppeConvexe("PourVoronoi", this.grapheInitial);
//		Area aireEnveloppeConvexe = new Area(ev.getEnveloppePolygone("Buffer"));
		
//		Polygon[] polygones = new Polygon[this.regionsDeVoronoi.length];
		
		int j = 0;
		for (MPolygon mPolygone : getRegionsDeVoronoi()) {
			
			float[][] pointsDuPolygone = mPolygone.getCoords();
			int nbPoints = pointsDuPolygone.length;
			
			Coordinate[] coords = new Coordinate[nbPoints];
			
			for (int i = 0; i < pointsDuPolygone.length; i++) {
				
				coords[i] = new Coordinate(pointsDuPolygone[i][0], pointsDuPolygone[i][1]);
				
			}
			
//			polygones[j] = new Polygon(coordXPolygone, coordYPolygone, nbPoints);
//			
//			aireCourante = new Area(polygones[j]);
			
			// Traitement
			// Pour tous les points de l'enveloppe, il faut realiser une union
			// de son polygone et de l'enveloppe
			// for (Point point : ev.getPointsEnveloppe()) {
			// if( aireCourante.contains(point) ){
//			aireCourante.intersect(aireEnveloppeConvexe);
			// }
			// }
			
			CelluleDeVoronoi cellCouranteCelluleDeVoronoi = new CelluleDeVoronoi("VoronoiCell_" + j, coords);
			
			cellsReturn.add(cellCouranteCelluleDeVoronoi);
			
			j++;
		}
		
		return cellsReturn;
	}
	
	public void pondereNoeudAleaRegion() {
		
		HashSet<CelluleDeVoronoi> cellulesDeVoronoi = getRegionsDeVoronoiPolygone();
		
		for (CelluleDeVoronoi cell : cellulesDeVoronoi) {
			for (Noeud iterNoeud : this.grapheInitial.getNoeuds()) {
				
				if (cell.polygone.contains( iterNoeud.getPosition() ) ) {
					iterNoeud.setPonderation(cell.getSurfacePolygone());
					iterNoeud.getNoeudGraphique().setCelluleDeVoronoi(cell);
					break;
				}
			}
		}
		this.grapheInitial.setGrapheChange();
	}
	
//	public void attribCouleurSurfaces() {
//		
//		HashSet<CelluleDeVoronoi> cellulesDeVoronoi = getRegionsDeVoronoiPolygone();
//		
//		for (CelluleDeVoronoi cell : cellulesDeVoronoi) {
//			for (Noeud iterNoeud : this.grapheInitial.getNoeuds()) {
//				
//				if (cell.polygone.contains(iterNoeud.getPosition())) {
//
//				}
//			}
//		}
//		this.grapheInitial.setGrapheChange();
//		
//	}
	
}