/**
 * GeoGraphLab - Eric Mermet - Cogit / IGN
 * 2007 - 2011
 *
 * Distances.java in algo.maths
 * 
 */
package fr.ign.cogit.geographlab.algo.maths;

import java.awt.Point;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.CoordinateSequence;

/**
 * @author mermet
 *
 */
public class Distances {
	
	/**
	 * 
	 * @param a
	 * @param b
	 * @return
	 */
	public static double deuxPoints(Point a, Point b){
		
		double distanceX = a.getX() - b.getX();
		double distanceY = a.getY() - b.getY();
		
		return Math.sqrt(distanceX * distanceX + distanceY * distanceY);
	}
	
	/**
	 * Computes the euclidian length a linestring specified by a sequence of points, but taking only start and end.
	 *
	 * @param pts the points specifying the linestring
	 * @return the length of the linestring
	 */
	@SuppressWarnings("boxing")
	public static double lengthEuclidian(CoordinateSequence pts) {
		// optimized for processing CoordinateSequences
		int n = pts.size();
		if (n <= 1) return 0.0;
		
		Coordinate cStart = pts.getCoordinate(0);
		Coordinate cEnd = pts.getCoordinate(n-1);

		double len = Math.sqrt(	Math.pow(cEnd.y - cStart.y, 2.0) +
								Math.pow(cEnd.x - cStart.x, 2.0)
				);
				
		return len;
	}
	
	
	
	/**
	 * Computes the length in 3D of a linestring specified by a sequence of points.
	 *
	 * @param pts the points specifying the linestring
	 * @return the length of the linestring
	 */
	@SuppressWarnings("boxing")
	public static double length3D(CoordinateSequence pts) {
		// optimized for processing CoordinateSequences
		int n = pts.size();
		if (n <= 1) return 0.0;
		
		double len = 0.0;
		
		for (int i = 0 ; i < n - 1 ; i++) {
			Coordinate c0 = pts.getCoordinate(i);
			Coordinate c1 = pts.getCoordinate(i + 1);
			Double dx = new Double(c0.x - c1.x);
			Double dy = new Double(c0.y - c1.y);
			Double dz = new Double(c0.z - c1.z);
			
			if( !Double.isNaN(dz) )
				len += Math.sqrt(dx * dx + dy * dy + dz * dz);
			else
				len += Math.sqrt(dx * dx + dy * dy);
		}
		return len;
	}
	
}