/**
 * GeoGraphLab - Eric Mermet - Cogit / IGN 2007 - 2010
 * 
 * ${file_name} in ${package_name}
 * 
 */

package fr.ign.cogit.geographlab.algo;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Set;

import org.jgrapht.Graphs;
import org.jgrapht.alg.ConnectivityInspector;


import fr.ign.cogit.geographlab.exploration.Carte;
import fr.ign.cogit.geographlab.graphe.Arc;
import fr.ign.cogit.geographlab.graphe.Graphe;
import fr.ign.cogit.geographlab.graphe.Noeud;
import fr.ign.cogit.geographlab.visu.ArcGraphique;

public class DetectionImpasses extends Thread {
	
	Carte carte;
	Graphe graphe;
	
	List<Arc> listeImpasses;
	
	public Thread thread;
	
	public DetectionImpasses(Carte carte) {
		this.thread = new Thread(this);
		this.carte = carte;
		this.graphe = this.carte.getGraphe();
	}
	
	public List<Arc> detectionSimple() {
		
		// Methode de detection des noeuds de degre 1
		
		this.listeImpasses = new ArrayList<Arc>();
		
		for (Noeud noeuds : this.graphe.getNoeuds()) {
			if (Graphs.neighborListOf(this.graphe, noeuds).size() == 1) {
				
				Noeud noeudVoisin = Graphs.neighborListOf(this.graphe, noeuds).get(0);
				
				this.listeImpasses.add(this.graphe.getEdge(noeuds, noeudVoisin));
			}
		}
		
		for (ArcGraphique ag : this.carte.getVueDuGraphe().getArcsGraphiques()) {
			for (Arc arc : this.listeImpasses) {
				if (arc.getNom().compareTo(ag.getNom()) == 0) {
					ag.setSelected(true);
					break;
				}
			}
		}
		
		return this.listeImpasses;
	}
	
	public List<Arc> detectionComposantesConnexes() {
		
		// Methode par augmentation +1 de composantes connexes
		
		Calendar c1 = Calendar.getInstance();
		
		long debut = c1.getTimeInMillis();
		
		ConnectivityInspector<Noeud, Arc> connexiteInitiale;
		connexiteInitiale = new ConnectivityInspector<Noeud, Arc>(this.graphe);
		int nbComposantesConnexes = connexiteInitiale.connectedSets().size();
		
		System.out.println("nb composantes connexes initiales = " + nbComposantesConnexes);
		
		Graphe copieGraphe = this.graphe.clone();
		ConnectivityInspector<Noeud, Arc> testDeConnexite;
		
		int nbArcs = this.graphe.getNombreArcs();
		int i = 0;
		
		for (Arc arc : this.graphe.getArcs()) {
			
			// System.out.println(arc.getNom());
			//			
			// if( arc.getNom().compareTo("Vertex_5147 - Vertex_4781") == 0)
			// System.out.println("pass" + arc.getNom());
			
			copieGraphe.removeEdge(arc);
			
			testDeConnexite = new ConnectivityInspector<Noeud, Arc>(copieGraphe);
			
			int nbComposantesConnexesApresSuppressionArc = testDeConnexite.connectedSets().size();
			
			// Si le reseau est deconnecte, le nombre de composantes connexes
			// augmente
			if (nbComposantesConnexesApresSuppressionArc == nbComposantesConnexes + 1) {
				
				Noeud noeudSource = arc.getSource();
				Noeud noeudCible = arc.getTarget();
				
				// On recupere les noeuds des deux composantes connexes de part
				// et d'autre de l'arc supprime
				Set<Noeud> listeDesNoeudsComposanteConnexeSource = testDeConnexite.connectedSetOf(noeudSource);
				Set<Noeud> listeDesNoeudsComposanteConnexeCible = testDeConnexite.connectedSetOf(noeudCible);
				
				Set<Noeud> NoeudComposanteConnexeMinimal = null;
				
				// Heuristique
				if (listeDesNoeudsComposanteConnexeSource.size() > listeDesNoeudsComposanteConnexeCible.size()) {
					NoeudComposanteConnexeMinimal = listeDesNoeudsComposanteConnexeCible;
				} else {
					NoeudComposanteConnexeMinimal = listeDesNoeudsComposanteConnexeSource;
				}
				
				// Selection des noeuds graphiques
				// for( NoeudGraphique ng:
				// this.carte.getVueDuGraphe().getNoeudsGraphiques()){
				// for( Noeud noeud: NoeudComposanteConnexeMinimal){
				// if( noeud.getNom().compareTo(ng.getNom()) == 0){
				// ng.setSelected(true);
				// // noeud.setSelected(true);
				// break;
				// }
				// }
				// }
				
				for (Noeud noeud : NoeudComposanteConnexeMinimal) {
					noeud.setSelected(true);
				}
				
				// Selection des arcs graphiques incidents aux noeuds selectionnes
				// List<Arc> listeArc = new ArrayList<Arc>();
				for (Arc arcSel : this.graphe.getArcs()) {
					for (Noeud noeud : NoeudComposanteConnexeMinimal) {
						if (Graphs.testIncidence(this.graphe, arcSel, noeud)) {
							// Alors selectionner l'arc
							// this.listeImpasses.add(arcSel);
							arcSel.setSelected(true);
							// for( ArcGraphique ag:
							// this.carte.getVueDuGraphe().getArcsGraphiques()){
							// if( arcSel.getNom().compareTo(ag.getNom()) == 0){
							// ag.setSelected(true);
							// arcSel.setSelected(true);
							// break;
							// }
							// }
						}
					}
				}
				
			}
			
			copieGraphe.addArc(arc);
			
			i++;
			
			if (i % 100 == 0)
				System.out.println(i + " / " + nbArcs);
			
		}
		
		Calendar c2 = Calendar.getInstance();
		
		long tempsExecution = c2.getTimeInMillis() - debut;
		;
		System.out.println("Temps d'execution (ms):" + tempsExecution);
		
		// Insertion dans le gestionnaire de couches
		Carte nouvelleCartePourNouvelleCouche = (Carte) this.carte.clone();
		nouvelleCartePourNouvelleCouche.setNom(nouvelleCartePourNouvelleCouche.getNom() + "_Impasses");
		nouvelleCartePourNouvelleCouche.setColorLayer(Color.MAGENTA);
		// this.carte.parent.couchesDeCartes.ajouterUneCoucheCarte(this.carte);
		this.carte.parent.parent.panelLayer.updateLayersFromLayerControler();
		
		return this.listeImpasses;
	}
	
}
